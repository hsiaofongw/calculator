PRODUCTION RULES:

注：语法层面只关注运算符的优先级，至于运算符左右两侧的表达式的类型是否符合语义，则是在语义分析阶段进行判断。

S  ->  B5  # 开始符号是 B5

L       ->  ε
         |  S  LIST_EXT

LIST_EXT  ->  ,  S  LIST_EXT
           |  ε

B5     ->  B4  ASSIGNMENT  

ASSIGNMENT  ->  :=  B4  ASSIGNMENT  # 立即赋值
             |  =  B4  ASSIGNMENT  # 延迟赋值
             |  ε

B4     ->  B3  SUBSTITUTE

SUBSTITUTE  ->  /.  B3  SUBSTITUTE  # ReplaceAll[expr, rules]
             |  ε  

B3     ->  B2L  RULE

RULE   ->  ->  B2L    # Rule
        |  :->  B2L   # RuleDelayed
        |  ε          # 暂时没想到 Nested Rule 有什么用

B2L     ->  B2_NOT  LOGIC  # 逻辑运算

LOGIC   ->  ε
         |  &&  B2_NOT  LOGIC  # And
         |  ||  B2_NOT  LOGIC  # Or

B2_NOT  ->  !  B2_NOT  # Not
         |  B2

B2      ->  E  BOOL

BOOL    ->  >  E  BOOL
         |  <  E  BOOL
         |  >=  E  BOOL 
         |  <=  E  BOOL 
         |  ==  E  BOOL   # 直接比较两者是否相等
         |  ===  E  BOOL  # 求值后再比较两者是否相等
         |  !=  E  BOOL   # 直接比较两者是否不等
         |  !==  E  BOOL  # 求值后再比较两者是否不等
         |  ε

E      ->  T  E'            

E'     ->  +  T  E'
        |  -  T  E'
        |  ε

T      ->  F3  T'

T'     ->  *  F3  T'
        |  /  F3  T'
        |  ε

F3         ->  F2  REM

REM        ->  %  F2  REM
            |  ε

F2         ->  -  F1
            |  F1

F1         ->  F0  POW

POW        ->  ε
            |  ^  F0  POW

F0  ->  COMPOUND PATTERN_COMPOUND
     |  PATTERN_OP  PATTERN_EXT

PATTERN_COMPOUND  ->  PATTERN_OP  PATTERN_EXT
                   |  eps

PATTERN_EXT  ->  eps
              |  COMPOUND

PATTERN_OP    ->  _         # Blank
               |  __        # BlankSequence
               |  ___       # BlankNullSequence

COMPOUND   ->  BASE  COMPOUND_EXT

COMPOUND_EXT  ->  eps
               |  [  COMPOUND_EXT_2

COMPOUND_EXT_2  ->  L  ]  COMPOUND_EXT           # 函数调用
                 |  [  S  ]  ]  COMPOUND_EXT     # 数组访问或者对象访问选择子，表达式都是 Take

BASE       ->  (  E  )               # 表示一个括号括起来的表达式, BASE 表示「不能再拆分的东西」
            |  NUM                   # 表示一个数字
            |  {  L  }               # 表示一个列表
            |  <|  L  |>             # 表示一个字典，系统在语法分析阶段不会关心 L 是不是一个关于 Rule 的列表，那是语义分析阶段的事情
            |  str                   # 表示一个字符串
            |  id                    # 表示一个标识符

NUM        ->  num  NUM_EXT

NUM_EXT    ->  ε
            |  !  DOUBLE_FACTORIAL
            |  .  num  DOT_EXT

DOT_EXT     ->  ε
             |  id  SCIENTIFIC_EXT    # 在语义分析阶段检查 id 是不是 E

SCIENTIFIC_EXT  ->  +  num    
                 |  -  num

DOUBLE_FACTORIAL  ->  ε
                   |  !

