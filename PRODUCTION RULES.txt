PRODUCTION RULES:

S      ->  S'  CMP_0        # 开始语句，将可能直接推导为一个值或者一个 CMP_0 判断语句

CMP_0  ->  ==  S'  CMP_0    # 在 CMP_0 状态下，当遇到一个 == 符号时，将开始匹配相等性判断语句
        |  ε                # 如果没有符号可匹配，那就不匹配，翻译器对于 CMP_0 -> ε 会什么都不做

S'     ->  CMP_1            # 值可以是布尔代数运算或者常规算术运算的结果

L      ->  S  L'            # 一个列表可以是非空的
        |  ε                # 一个列表还可以是空的

L'     ->  ,  S  L'         # 一个列表如果是非空的，那么一定是逗号分隔的
        |  ε                # 一个列表如果是非空的，那么最后一项不会是逗号

CMP_1  ->  E  CMP_2         # 表达式可以参与到布尔代数运算中来，并且布尔算符与操作数的结合优先级是比普通四则运算算符低的，这也就是说：先做算术运算，后做更一般的代数运算

CMP_2  ->  >  E  CMP_2      # 这条规则将当前运算结果以严格大于布尔算符 > 作为算符与下一项进行运算
        |  <  E  CMP_2      # 这条规则将当前运算结果以严格小于布尔算符 < 作为算符与下一项进行运算
        |  >=  E  CMP_2     # 这条规则将当前运算结果以严格不小于布尔算符 >= 作为算符与下一项进行运算
        |  <=  E  CMP_2     # 这条规则将当前运算结果以严格不大于布尔算符 <= 作为算符与下一项进行运算
        |  ε                # 这条规则代表布尔表达式匹配结束

E      ->  T  E'            # 一个表达式由两部分构成，首项 T 和余项 E'

E'     ->  +  T  E'         # 余项 E' 可以以加号 + 开头，代表当前计算结果以相加的形式与下一项进行运算
        |  -  T  E'         # 余项 E' 可以以减号 - 开头，代表当前计算结果以相减的形式与下一项进行运算
        |  ε                # 如果没有符号可匹配，那就不匹配，翻译器对于 E' -> ε 会什么都不做

T      ->  REM_0  T'        # 一个项由两部分构成，首项、余项 T'

T'     ->  *  REM_0  T'     # 余项 T' 可以以乘号 * 开头，代表当前计算结果以相乘的形式与下一项进行运算
        |  /  REM_0  T'     # 余项 T' 可以以除号 / 开头，代表当前计算结果以相除的形式与下一项进行运算
        |  ε                # 如果没有符号可匹配，那就不匹配，翻译器对于 T' -> ε 会什么都不做

REM_0  ->  NEG  REM_1       # 余数运算开始

REM_1  ->  %  NEG REM_1     # 将当前结果与下一个数进行取余数运算
        |  ε                # 余数运算结束

NEG    ->  -  POW_0         # 一个数前面加负号可成为一个负数
        |  POW_0            # 一个数前面也可不加负号

POW_0  ->  F  POW_1         # 幂次运算开始

POW_1  ->  ^  F  POW_1      # 将当前结果与下一个数进行幂次运算
        |  ε                # 幂次运算结束

F      ->  F'  P            # 因子后面可能加上参数列表

F'     ->  (  E  )          # 因子推导为一个被括号包围的表达式
        |  num              # 因子推导为一个数字
        |  id               # 因子推导为一个标识符
        |  {  L  }          # 因子推导为一个列表
        |  str              # 因子推导为一个字符串
         
P      ->  [  L  ]  P       # 推导为函数参数列表
        |  =  S             # 推导为赋值语句
        |  ε                # 如果没有符号可匹配，那就不匹配，翻译器对于 P -> ε 会什么都不做
        